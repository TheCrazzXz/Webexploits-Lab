<! -- 
    Loose comparaisons is when compare a variable with another without checking their types
    That can result to problems
-->

<DOCTYPE html>
<html>
    <head>
        <title>Loose comparaison</title>
    </head>
    <body>
        <h1>Loose comparaisons in PHP</h1>
    </body>
</html>

<?php
    function print_strong($msg)
    {
        echo "<p><strong>$msg</strong></p>";
    }
    echo "<h2>Simple loose comparaisons</h2>";

    $input = true; // (boolean) Then the check will return true because it's a loose comparaison
    $str = "A_Nice_Password";
    echo "<p>Input : $input</p>";
    echo "<p>Other compared variable : $str</p>";

    $result = $input == $str;
    print_strong("Result of loose comparaison : $result");
    if($result)
    {
        print_strong("[+] It's true");
    }
    else
    {
        print_strong("[-] It's false");
    }

    echo "<h2>strcmp bypass</h2>";
    /* strcmp bypass example */
    $input = []; // (Array) We pass an empty string to make it return NULL, so it will bypass the check using Loose comparaison
    $str = "A_Reaaaly_Nice_Password";

    echo "<p>Input : ";
    print_r($input);
    echo "</p>";
    echo "<p>Other compared variable : $str</p>";

    $result = strcmp($str, $input);

    print_strong("Result of strcmp : $result");
    if(!$result) 
    // You see here that we're exposed to the vulnerability because we don't check if the $result is exactly 0
    // We only check if it's not, if it's NULL, so if it's 0 or NULL
    {
        print_strong("[+] strcmp says that the strings are the same");
    }
    else
    {
        print_strong("[-] strcmp says that they're not the same");
    }
?>